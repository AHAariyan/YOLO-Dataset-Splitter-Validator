import os
import shutil
import random
from pathlib import Path
import yaml
import logging
import sys

# -------- Configure logging ------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    handlers=[
                        logging.StreamHandler(sys.stdout)
                    ])

def split_dataset(
        source_images_dir: Path,
        source_labels_dir: Path,
        output_root_dir: Path,
        train_ratio: float = 0.8,
        val_ratio: float = 0.1,
        test_ratio: float = 0.1,
        class_names_file: Path = None # Path to your classes.txt from Label Studio export
):
    """
    Splits an image dataset and its corresponding YOLO labels into training,
    validation, and test sets, and organizes them into the YOLO directory structure.

    Args:
        source_images_dir (Path): Path to the directory containing all original images.
        source_labels_dir (Path): Path to the directory containing all original YOLO .txt labels.
        output_root_dir (Path): The root directory where the new dataset structure will be created.
                                (e.g., 'canteen_products_dataset/')
        train_ratio (float): Proportion of data for the training set.
        val_ratio (float): Proportion of data for the validation set.
        test_ratio (float): Proportion of data for the test set.
        class_names_file (Path): Optional. Path to the classes.txt file generated by Label Studio.
                                 If provided, it will be used to generate dataset.yaml.
    """
    if not (source_images_dir.is_dir() and source_labels_dir.is_dir()):
        logging.error(f"Source directories not found: {source_images_dir} or {source_labels_dir}")
        sys.exit(1)

    if not (train_ratio + val_ratio + test_ratio == 1.0):
        logging.error("Train, validation, and test ratios must sum to 1.0.")
        sys.exit(1)

    # Create the main dataset structure
    (output_root_dir / "images" / "train").mkdir(parents=True, exist_ok=True)
    (output_root_dir / "images" / "val").mkdir(parents=True, exist_ok=True)
    (output_root_dir / "images" / "test").mkdir(parents=True, exist_ok=True)
    (output_root_dir / "labels" / "train").mkdir(parents=True, exist_ok=True)
    (output_root_dir / "labels" / "val").mkdir(parents=True, exist_ok=True)
    (output_root_dir / "labels" / "test").mkdir(parents=True, exist_ok=True)

    logging.info(f"Created dataset directory structure at: {output_root_dir}")

    # Get list of all image files
    image_files = [f for f in source_images_dir.iterdir() if f.is_file() and f.suffix.lower() in ['.jpg', '.jpeg', '.png', '.bmp']]
    random.shuffle(image_files) # Shuffle to ensure random split

    total_images = len(image_files)
    train_count = int(total_images * train_ratio)
    val_count = int(total_images * val_ratio)
    # Test count takes the rest to ensure sum to 1.0 due to int casting
    test_count = total_images - train_count - val_count

    logging.info(f"Total images: {total_images}")
    logging.info(f"Splitting into: Train={train_count}, Val={val_count}, Test={test_count}")

    # Perform the split
    train_files = image_files[:train_count]
    val_files = image_files[train_count : train_count + val_count]
    test_files = image_files[train_count + val_count :]

    splits = {
        "train": train_files,
        "val": val_files,
        "test": test_files
    }

    # Copy files to new structure
    for split_name, files in splits.items():
        logging.info(f"Copying {len(files)} files to {split_name} set...")
        for img_path in files:
            # Construct corresponding label path
            label_path = source_labels_dir / (img_path.stem + ".txt")

            # Destination paths
            dest_img_path = output_root_dir / "images" / split_name / img_path.name
            dest_label_path = output_root_dir / "labels" / split_name / label_path.name

            # Copy image
            shutil.copy2(img_path, dest_img_path)

            # Copy label (only if it exists, for images without annotations)
            if label_path.exists():
                shutil.copy2(label_path, dest_label_path)
            else:
                # Create an empty .txt file if the image had no annotations
                # This is important for YOLO to correctly understand negative samples.
                with open(dest_label_path, 'w') as f:
                    pass # Create empty file
                logging.debug(f"Created empty label file for {img_path.name} in {split_name} set.")

    logging.info("Dataset splitting and organization complete.")

    # --- Generate dataset.yaml ---
    class_names = []
    if class_names_file and class_names_file.exists():
        with open(class_names_file, 'r') as f:
            class_names = [line.strip() for line in f if line.strip()]
        logging.info(f"Loaded class names: {class_names}")
    else:
        logging.warning("classes.txt not found or not provided. dataset.yaml will have empty names list.")

    dataset_yaml_content = {
        'path': str(output_root_dir.resolve()), # Absolute path for clarity
        'train': 'images/train',
        'val': 'images/val',
        'test': 'images/test',
        'nc': len(class_names),
        'names': {i: name for i, name in enumerate(class_names)}
    }

    dataset_yaml_path = output_root_dir / "dataset.yaml"
    with open(dataset_yaml_path, 'w') as f:
        yaml.dump(dataset_yaml_content, f, sort_keys=False) # sort_keys=False to preserve order
    logging.info(f"Generated dataset.yaml at: {dataset_yaml_path}")
    logging.info("Dataset is now ready for YOLOv11 training!")

if __name__ == "__main__":
    # --- Configuration for your script ---

    # 1. Path to the folder containing your images from Label Studio export
    # This is the 'images/' folder inside your extracted Label Studio zip.
    # Example: /home/aariyan/Downloads/my_project_export/images/
    SOURCE_IMAGES_DIR = Path("/media/aariyan/PseudoCode/AI/Labelling/canteen_labels/project-1-at-2025-07-07-12-01-dd1d44d3/images")

    # 2. Path to the folder containing your labels from Label Studio export
    # This is the 'labels/' folder inside your extracted Label Studio zip.
    # Example: /home/aariyan/Downloads/my_project_export/labels/
    SOURCE_LABELS_DIR = Path("/media/aariyan/PseudoCode/AI/Labelling/canteen_labels/project-1-at-2025-07-07-12-01-dd1d44d3/labels")

    # 3. Path to the classes.txt file from Label Studio export
    # This is the 'classes.txt' file at the root of your extracted Label Studio zip.
    # Example: /home/aariyan/Downloads/my_project_export/classes.txt
    CLASSES_FILE = Path("/media/aariyan/PseudoCode/AI/Labelling/canteen_labels/project-1-at-2025-07-07-12-01-dd1d44d3/classes.txt")

    # 4. The root directory where the new, organized dataset will be created
    # This will create 'canteen_products_dataset/' with images/ and labels/ subfolders.
    # Choose a location where you want your final dataset to reside.
    OUTPUT_DATASET_ROOT = Path("/media/aariyan/PseudoCode/AI/Dataset/canteen_product_dataset/")

    # 5. Define your desired split ratios
    TRAIN_RATIO = 0.8  # 80% for training
    VAL_RATIO = 0.1    # 10% for validation
    TEST_RATIO = 0.1   # 10% for testing (ensure sum is 1.0)

    # --- Run the splitting function ---
    try:
        split_dataset(
            source_images_dir=SOURCE_IMAGES_DIR,
            source_labels_dir=SOURCE_LABELS_DIR,
            output_root_dir=OUTPUT_DATASET_ROOT,
            train_ratio=TRAIN_RATIO,
            val_ratio=VAL_RATIO,
            test_ratio=TEST_RATIO,
            class_names_file=CLASSES_FILE
        )
        logging.info("Dataset preparation script finished successfully.")
    except Exception as e:
        logging.error(f"An error occurred during dataset preparation: {e}", exc_info=True)
        sys.exit(1)
